1.
my_data: 0x0123456
my_data+2: 0xff
my_data+3: 0xabcdabcd

2.
a. The program calculates the sum of all the absolute values of elements in the array. The final value of [d] is 105. [arr + i] += [arr + 2]
b. The program checks if value in edx = 0. If it is, then it doesn't loop and proceeds to the end. This works because the last element in arr is 0.
c. Each value in the array is 2 bytes long because of the dw directive. Define word is 2 bytes on a typical x86 32-bit system. 
d. The d variable was declared with the define double word, which is 4 bytes long on an x86 32-bit system
e. 10 bytes, because there are 5 elements in arr and each value is 2 bytes big.
f. First, it checks if the value in the array is non-negative. If it is, then it jumps to L1. If it is negative, then it takes the 2's complement negative of that number, flipping the sign to get the correct absolute value.
g. Because edx is used to store the absolute values in (loop:). Setting it to zero ensures that we don't introduce any unwanted bias and get undefined behavior since we start with registers in a "clean slate".

